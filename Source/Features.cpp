#include "stdafx.h"

static LPCSTR weaponNames[] = {
	"WEAPON_KNIFE", "WEAPON_NIGHTSTICK", "WEAPON_HAMMER", "WEAPON_BAT", "WEAPON_GOLFCLUB", "WEAPON_CROWBAR",
	"WEAPON_PISTOL", "WEAPON_COMBATPISTOL", "WEAPON_APPISTOL", "WEAPON_PISTOL50", "WEAPON_MICROSMG", "WEAPON_SMG",
	"WEAPON_ASSAULTSMG", "WEAPON_ASSAULTRIFLE", "WEAPON_CARBINERIFLE", "WEAPON_ADVANCEDRIFLE", "WEAPON_MG",
	"WEAPON_COMBATMG", "WEAPON_PUMPSHOTGUN", "WEAPON_SAWNOFFSHOTGUN", "WEAPON_ASSAULTSHOTGUN", "WEAPON_BULLPUPSHOTGUN",
	"WEAPON_STUNGUN", "WEAPON_SNIPERRIFLE", "WEAPON_HEAVYSNIPER", "WEAPON_GRENADELAUNCHER", "WEAPON_GRENADELAUNCHER_SMOKE",
	"WEAPON_RPG", "WEAPON_MINIGUN", "WEAPON_GRENADE", "WEAPON_STICKYBOMB", "WEAPON_SMOKEGRENADE", "WEAPON_BZGAS",
	"WEAPON_MOLOTOV", "WEAPON_FIREEXTINGUISHER", "WEAPON_PETROLCAN",
	"WEAPON_SNSPISTOL", "WEAPON_SPECIALCARBINE", "WEAPON_HEAVYPISTOL", "WEAPON_BULLPUPRIFLE", "WEAPON_HOMINGLAUNCHER",
	"WEAPON_PROXMINE", "WEAPON_SNOWBALL", "WEAPON_VINTAGEPISTOL", "WEAPON_DAGGER", "WEAPON_FIREWORK", "WEAPON_MUSKET",
	"WEAPON_MARKSMANRIFLE", "WEAPON_HEAVYSHOTGUN", "WEAPON_GUSENBERG", "WEAPON_HATCHET", "WEAPON_RAILGUN",
	"WEAPON_COMBATPDW", "WEAPON_KNUCKLE", "WEAPON_MARKSMANPISTOL"
};

int rgb_rainbow_red = 255, rgb_rainbow_green, rgb_rainbow_blue;
int MoneyDropDelay = GetTickCount(), autoMoney_Delay = GetTickCount();

void Features::apply_vehicle_mod(Vehicle veh, int modtype, int modindex) {
	VEHICLE::SET_VEHICLE_MOD(veh, modtype, modindex, true);
}

void Features::money_bank() {
	NETWORKCASH::NETWORK_EARN_FROM_ROCKSTAR(200000);
}

void Features::money_ammo(Ped player, bool toggle) {
	if (ENTITY::DOES_ENTITY_EXIST(player) && PED::IS_PED_SHOOTING(player))
	{
		float Tmp[6];
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(player, (Vector3*)Tmp);
		if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0) {

			uint model_hash = $("prop_money_bag_01");

			if (!STREAMING::IS_MODEL_VALID(model_hash))
				return;

			while (!STREAMING::HAS_MODEL_LOADED(model_hash))
				WAIT(0);

			if (STREAMING::HAS_MODEL_LOADED(model_hash)) {
				OBJECT::CREATE_AMBIENT_PICKUP($("PICKUP_MONEY_CASE"), Tmp[0], Tmp[2], Tmp[4], 0, rand() % 10000, $("Prop_weed_01"), FALSE, TRUE);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED($("Prop_weed_01"));
			}
		}
	}
}

void Features::weapon_damage_modifier(Ped player, bool toggle) {
	if (ENTITY::DOES_ENTITY_EXIST(player) && toggle) 
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player, 999999999999.9f);
	else if (ENTITY::DOES_ENTITY_EXIST(player) && !toggle)
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player, 1.0f);
}

void Features::auto_money(Ped player, int amount, int delay) {
	if (ENTITY::DOES_ENTITY_EXIST(player) && GetTickCount() - MoneyDropDelay > delay) {

		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(player, 0.0f, 0.0f, 0.0f);
		Ped pedTarget;
		PED::GET_CLOSEST_PED(coords.x, coords.y, coords.z, 999999999, 1, 0, &pedTarget, TRUE, TRUE, -1);
		if (!PED::IS_PED_A_PLAYER(pedTarget) && ENTITY::DOES_ENTITY_EXIST(pedTarget) && !ENTITY::IS_ENTITY_IN_WATER(pedTarget)) {
			Vector3 targetCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(pedTarget, 0.0f, 0.0f, 0.0f);

			if (targetCoords.z < 1)
				return;

			teleport_to_coords(player, targetCoords);
			PED::SET_PED_MONEY(pedTarget, amount);
			ENTITY::SET_ENTITY_HEALTH(pedTarget, 0);
			ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&pedTarget);
			autoMoney_Delay = GetTickCount();
		}
	}
}

void Features::money_drop(Ped player, int amount, int delay) {
	if (ENTITY::DOES_ENTITY_EXIST(player) && GetTickCount() - MoneyDropDelay > delay) {
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(player, 0.0f, 0.0f, 0.0f);
		uint model_hash = $("prop_money_bag_01");

		if (!STREAMING::IS_MODEL_VALID(model_hash))
			return;

		while (!STREAMING::HAS_MODEL_LOADED(model_hash))
			WAIT(0);

		if (STREAMING::HAS_MODEL_LOADED(model_hash)) {
			OBJECT::CREATE_AMBIENT_PICKUP($("PICKUP_MONEY_CASE"), coords.x , coords.y, coords.z, 0, amount, model_hash, false, true);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model_hash);
			MoneyDropDelay = GetTickCount();
		}
	}
}

void Features::color_loop(Vehicle VehicleHandle, bool toggle) {
	if (toggle) {

		if (rgb_rainbow_red == 255 && rgb_rainbow_green < 255 && rgb_rainbow_blue == 0)
			rgb_rainbow_green++;
		else if (rgb_rainbow_green == 255 && rgb_rainbow_red > 0 && rgb_rainbow_blue == 0)
			rgb_rainbow_red--;

		if (rgb_rainbow_green == 255 && rgb_rainbow_blue < 255 && rgb_rainbow_red == 0)
			rgb_rainbow_blue++;
		else if (rgb_rainbow_blue == 255 && rgb_rainbow_green > 0 && rgb_rainbow_red == 0)
			rgb_rainbow_green--;

		if (rgb_rainbow_blue == 255 && rgb_rainbow_red < 255 && rgb_rainbow_green == 0)
			rgb_rainbow_red++;
		else if (rgb_rainbow_red == 255 && rgb_rainbow_blue > 0 && rgb_rainbow_green == 0)
			rgb_rainbow_blue--;

		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehicleHandle, rgb_rainbow_red, rgb_rainbow_green, rgb_rainbow_blue);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehicleHandle, rgb_rainbow_red, rgb_rainbow_green, rgb_rainbow_blue);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehicleHandle, rgb_rainbow_red, rgb_rainbow_green, rgb_rainbow_blue);
	}
}

void Features::veh_invisible(Vehicle veh, bool toggle) {
	ENTITY::SET_ENTITY_VISIBLE(veh, !toggle, 0);
}

void Features::fix_veh(Vehicle veh) {
	VEHICLE::SET_VEHICLE_FIXED(veh);
	VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(veh);
	VEHICLE::SET_VEHICLE_DIRT_LEVEL(veh, 0);
}

void Features::flip_veh(Vehicle veh) {
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
}

void Features::set_plate(Vehicle VehicleHandle) {
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(VehicleHandle, (char*)show_keyboard("Plate name", "").c_str());
}

void Features::Max_veh(Vehicle VehicleHandle) {

	VEHICLE::SET_VEHICLE_FIXED(VehicleHandle);
	VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(VehicleHandle);
	VEHICLE::SET_VEHICLE_DIRT_LEVEL(VehicleHandle, 0);
	VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(VehicleHandle, 0);
	VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(VehicleHandle, 0);
	VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(VehicleHandle, 1);
	VEHICLE::SET_VEHICLE_MOD_KIT(VehicleHandle, 0);
	VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehicleHandle, rand() % 255, rand() % 255, rand() % 255);
	VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehicleHandle, rand() % 255, rand() % 255, rand() % 255);
	VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 18, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 22, 1);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 16, 5, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 12, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 11, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 14, 14, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 15, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 13, 2, 0);
	VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehicleHandle, 6);
	VEHICLE::SET_VEHICLE_WINDOW_TINT(VehicleHandle, 1);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 23, 14, 2);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 0, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 1, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 2, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 3, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 4, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 5, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 6, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 7, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 8, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 9, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 10, 1, 0);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehicleHandle, 0, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehicleHandle, 1, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehicleHandle, 2, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehicleHandle, 3, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehicleHandle, rand() % 255, rand() % 255, rand() % 255);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(VehicleHandle, 6);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(VehicleHandle, "Kryooth");
	
}

void Features::spawn_vehicle_model(uint model, bool teleport, bool maxed) {

	STREAMING::REQUEST_MODEL(model);
	DWORD now = GetTickCount();
	while (!STREAMING::HAS_MODEL_LOADED(model) && GetTickCount() < now + 5000)
	{
		WAIT(0);
	}

	if (!STREAMING::HAS_MODEL_LOADED(model))
	{
		notifyAboveMap("Failed to load vehicle model, request timed out");
		return;
	}

	auto VehicleHandle = do_spawn_vehicle(model, teleport, maxed);
	if (VehicleHandle)
	{
		notifyAboveMap("Vehicle spawned");
		if (maxed)
			Max_veh(VehicleHandle);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&VehicleHandle);

		return;
	}
}

Vehicle Features::do_spawn_vehicle(uint model, bool teleport, bool maxed)
{
	auto heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
	auto coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);

	float forward = 5.f;
	float xVect = forward * sin(degToRad(heading)) * -1.0f;
	float yVect = forward * cos(degToRad(heading));
	BOOL isAircraft = VEHICLE::IS_THIS_MODEL_A_HELI(model) || VEHICLE::IS_THIS_MODEL_A_PLANE(model);

	Vehicle vehicle = NULL;
	if (isAircraft && teleport)
	{
		vehicle = VEHICLE::CREATE_VEHICLE(model, coords.x + xVect, coords.y + yVect, coords.z + 1000, heading, TRUE, TRUE);
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(vehicle, 500.0f);
		VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle);
	}
	else
	{
		vehicle = VEHICLE::CREATE_VEHICLE(model, coords.x + xVect, coords.y + yVect, coords.z, heading, TRUE, TRUE);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle);
	}

	DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);

	if (teleport) PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), vehicle, -1);

	return vehicle;
}

void Features::no_ragdoll(bool toggle, Player player, Ped player_ped) {
	PED::SET_PED_CAN_RAGDOLL(player_ped, !toggle);
	PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(player_ped, !toggle);
	PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(player_ped, !toggle);
	PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(player, toggle);
	PED::SET_PED_RAGDOLL_ON_COLLISION(player_ped, !toggle);
}

void Features::toggle_GodMod(bool toggle, Player player) {
	PLAYER::SET_PLAYER_INVINCIBLE(player, toggle);
}

void Features::toggle_Invisibility(bool toggle, Entity player) {
	ENTITY::SET_ENTITY_VISIBLE(player, !toggle, FALSE);
}

void Features::toggle_super_jump(bool toggle, Player player) {
	if (toggle)
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(player);
}

void Features::never_wanted(bool toggle, Player player) {
	if (toggle)
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(player);
}

void Features::set_primary_color(Vehicle veh, int r, int g, int b) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, r, g, b);
}

void Features::set_secondary_color(Vehicle veh, int r, int g, int b) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, r, g, b);
}

void Features::set_neon_color(Vehicle veh, int r, int g, int b) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(veh, r, g, b);
}

void Features::set_engine_rpm(Vehicle veh, float multiplier) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::_SET_VEHICLE_ENGINE_POWER_MULTIPLIER(veh, multiplier);
}

void Features::set_engine_torque(Vehicle veh, float multiplier) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(veh, multiplier);
}

void Features::set_light_multiplier(Vehicle veh, float multiplier) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(veh, multiplier);
}

void Features::set_plate_type(Vehicle veh, int index) {
	if (ENTITY::IS_ENTITY_A_VEHICLE(veh))
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh, index);
}

void Features::no_reload(Ped player, bool toggle) {
	if (!toggle && !PED::IS_PED_A_PLAYER(player))
		return;

	static Hash currentWeapon;
	if (WEAPON::GET_CURRENT_PED_WEAPON(player, &currentWeapon, 1))
	{
		if (WEAPON::IS_WEAPON_VALID(currentWeapon))
		{
			int maxAmmo;
			if (WEAPON::GET_MAX_AMMO(player, currentWeapon, &maxAmmo))
			{
				WEAPON::SET_PED_AMMO(player, currentWeapon, maxAmmo);

				maxAmmo = WEAPON::GET_MAX_AMMO_IN_CLIP(player, currentWeapon, 1);
				if (maxAmmo > 0)
					WEAPON::SET_AMMO_IN_CLIP(player, currentWeapon, maxAmmo);
			}
		}
	}
}

void Features::give_weap(Ped player) {
	if (!PED::IS_PED_A_PLAYER(player))
		return;
	for (int i = 0; i < sizeof(weaponNames) / sizeof(weaponNames[0]); i++)
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(player, $((char *)weaponNames[i]), 8000, 0);
}

void Features::fire_ammo(Player player, bool toggle) {
	if (toggle)
		GAMEPLAY::SET_FIRE_AMMO_THIS_FRAME(player);
}

void Features::explosive_ammo(Player player, bool toggle) {
	if (toggle)
		GAMEPLAY::SET_EXPLOSIVE_AMMO_THIS_FRAME(player);
}

void Features::set_player_rp(int amount) {
	STATS::STAT_SET_INT($("MP0_CHAR_XP_FM"), amount, true);
}

void Features::bypass_sell_timer() {
	STATS::STAT_SET_INT($("MPPLY_VEHICLE_SELL_TIME"), 0, 1);
}

void Features::unlock_purchases() {
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_1_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_2_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_3_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_4_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_5_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_6_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_7_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_8_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_9_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_10_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_11_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_12_FM_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE11"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHASE12"), -1, 1);
}

void Features::unlock_maxstats() {
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_STAM"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_STRN"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_LUNG"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_DRIV"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_FLY"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_SHO"), 100, true);
	STATS::STAT_SET_INT($("MP0_SCRIPT_INCREASE_STL"), 100, true);
}

void Features::unlock_clothes() {
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_0"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_11"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_12"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_13"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_14"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_15"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_16"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_17"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_18"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_19"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_21"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_22"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_23"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_25"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_26"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_27"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_28"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_29"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_30"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_31"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_32"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_33"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_34"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_35"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_36"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_37"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_38"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_39"), -1, 1);
	STATS::STAT_SET_INT($("MP0_DLC_APPAREL_ACQUIRED_40"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHESGV_BS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
}

void Features::unlock_LSC() {
	STATS::STAT_SET_BOOL($("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 0);
	STATS::STAT_SET_INT($("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_USJS_COMPLETED"), 50, 0);
	STATS::STAT_SET_INT($("MP0_USJS_FOUND"), 50, 0);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMWINALLRACEMODES"), 1, 0);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 0);
	STATS::STAT_SET_INT($("MP0_DB_PLAYER_KILLS"), 1000, 0);
	STATS::STAT_SET_INT($("MP0_KILLS_PLAYERS"), 1000, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 0);
	STATS::STAT_SET_INT($("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TDM_MVP"), 60, 0);
	STATS::STAT_SET_INT($("MP0_AWD_HOLD_UP_SHOPS"), 20, 0);
	STATS::STAT_SET_INT($("MP0_AWD_RACES_WON"), 101, 0);
	STATS::STAT_SET_INT($("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMATTGANGHQ"), 1, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FMBBETWIN"), 50000, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_WINS"), 51, 0);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMFULLYMODDEDCAR"), 1, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_TOTALKILLS"), 500, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
	STATS::STAT_SET_INT($("MP0_PLAYER_HEADSHOTS"), 623, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_WINS"), 63, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TDM_WINS"), 13, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GTA_RACES_WON"), 12, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GOLF_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TENNIS_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TOTAL_RACES_WON"), 101, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
	STATS::STAT_SET_INT($("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 0);
	STATS::STAT_SET_INT($("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
	STATS::STAT_SET_INT($("MP0_AWD_50_KILLS_GRENADES"), 50, 0);
	STATS::STAT_SET_INT($("MP0_GRENADE_ENEMY_KILLS "), 50, 0);
	STATS::STAT_SET_INT($("MP0_AWD_20_KILLS_MELEE"), 50, 0);
}

void Features::unlock_tattoos() {
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_7"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_8"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_9"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_10"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_11"), -1, 1);
	STATS::STAT_SET_INT($("MP0_tattoo_fm_unlocks_12"), -1, 1);
}

void Features::unlock_max_armor_snaks() {
	STATS::STAT_SET_INT($("MP0_NO_BOUGHT_YUM_SNACKS"), 30, 0);
	STATS::STAT_SET_INT($("MP0_NO_BOUGHT_HEALTH_SNACKS"), 30, 0);
	STATS::STAT_SET_INT($("MP0_NO_BOUGHT_EPIC_SNACKS"), 30, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_ARMOUR_1_COUNT"), 10, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_ARMOUR_2_COUNT"), 10, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_ARMOUR_3_COUNT"), 10, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_ARMOUR_4_COUNT"), 10, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_ARMOUR_5_COUNT"), 10, 0);
}

void Features::unlock_heist_vehicle() {
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E2"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E3"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E4"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E5"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E6"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E7"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E8"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E9"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E10"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E11"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_FM_PURCHAS E12"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_1_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_2_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_3_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_4_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_5_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_6_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_7_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_8_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_9_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_10_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_11_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_KIT_12_FM_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_races_won"), 100, 0);
	STATS::STAT_SET_INT($("MP0_number_turbo_starts_in_race"), 100, 0);
	STATS::STAT_SET_INT($("MP0_usjs_found"), 50, 0);
	STATS::STAT_SET_INT($("MP0_usjs_completed"), 50, 0);
	STATS::STAT_SET_INT($("MP0_awd_fmwinairrace"), 50, 0);
	STATS::STAT_SET_INT($("MP0_awd_fmwinsearace"), 50, 0);
	STATS::STAT_SET_INT($("MP0_awd_fmrallywonnav"), 50, 0);
	STATS::STAT_SET_INT($("MP0_awd_fmrallywondrive "), 500, 0);
	STATS::STAT_SET_INT($("MP0_awd_fm_races_fastest_lap"), 500, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_0_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_1_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_2_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_3_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_4_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_5_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_6_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_char_fm_carmod_7_unlck"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_ABILITY_1_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_ABILITY_2_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_ABILITY_3_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_1_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_2_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_3_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_4_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_5_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_6_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_7_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_8_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_PACKAGE_9_COLLECT"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_HEALTH_1_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_HEALTH_2_UNLCK"), -1, 0);
	STATS::STAT_SET_INT($("MP0_HOLDUPS_BITSET"), -1, 0);
}

void Features::unlock_wep_skin() {
	STATS::STAT_SET_INT($("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_PISTOL50_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_APPISTOL_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_MICROSMG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_SMG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_ASLTSMG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_MG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_CMBTMG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_ASLTMG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_PUMP_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_SAWNOFF_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_BULLPUP_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_RPG_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_MINIGUNS_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_GRENADE_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_STKYBMB_ENEMY_KILLS"), 600, 0);
	STATS::STAT_SET_INT($("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
}

void Features::unlock_max_playtime() {
	STATS::STAT_SET_INT($("MP0_TOTAL_PLAYING_TIME"), 792000000, true);
}

void Features::unlock_chromerims() {
	STATS::STAT_SET_INT($("MP0_AWD_WIN_CAPTURES"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_DROPOFF_CAP_PACKAGES"), 100, 1);
	STATS::STAT_SET_INT($("MP0_AWD_KILL_CARRIER_CAPTURE"), 100, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FINISH_HEISTS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FINISH_HEIST_SETUP_JOB"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_NIGHTVISION_KILLS, 100"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_WIN_LAST_TEAM_STANDINGS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_ONLY_PLAYER_ALIVE_LTS"), 50, 1);
}

void Features::unlock_explusive_shirts() {
	STATS::STAT_SET_INT($("MP0_AWD_FMHORDWAVESSURVIVE"), 10, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_WIN_CAPTURE_DONT_DYING"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_DO_HEIST_AS_MEMBER"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_PICKUP_CAP_PACKAGES"), 100, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FINISH_HEIST_NO_DAMAGE"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_WIN_GOLD_MEDAL_HEISTS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_KILL_TEAM_YOURSELF_LTS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_DO_HEIST_AS_THE_LEADER"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_STORE_20_CAR_IN_GARAGES"), 1, 1);
}

void Features::unlock_redidsign_character1() {
	STATS::STAT_SET_BOOL($("MP0_FM_CHANGECHAR_ASKED"), 0, 1);
}

void Features::unlock_redidsign_character2() {
	STATS::STAT_SET_BOOL($("MP1_FM_CHANGECHAR_ASKED"), 0, 1);
}

void Features::unlock_skip_tuto() {
	STATS::STAT_SET_BOOL($("MP0_NO_MORE_TUTORIALS"), 1, 1);
}

void Features::unlock_trophies() {
	STATS::STAT_SET_INT($("MP0_PLAYER_HEADSHOTS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_PISTOL_ENEMY_KILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_SAWNOFF_ENEMY_KILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_MICROSMG_ENEMY_KILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_SNIPERRFL_ENEMY_KILLS"), 100, 1);
	STATS::STAT_SET_INT($("MP0_UNARMED_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_STKYBMB_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_GRENADE_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_RPG_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_CARS_EXPLODED"), 500, 1);
	STATS::STAT_SET_INT($("MP0_AWD_5STAR_WANTED_AVOIDANCE"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_CARS_EXPORTED"), 50, 1);
	STATS::STAT_SET_INT($("MP0_PASS_DB_PLAYER_KILLS"), 100, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_WINS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GOLF_WON"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GTA_RACES_WON"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_CT_WON"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_RT_WON"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_SHOOTRANG_TG_WON"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TDM_WINS"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TENNIS_WON"), 25, 1);
	STATS::STAT_SET_INT($("MP0_MOST_SPINS_IN_ONE_JUMP"), 5, 1);
	STATS::STAT_SET_INT($("MPPLY_AWD_FM_CR_DM_MADE"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMHORDWAVESSURVIVE"), 10, 1);
	STATS::STAT_SET_INT($("MP0_AWD_HOLD_UP_SHOPS"), 20, 1);
	STATS::STAT_SET_INT($("MP0_ASLTRIFLE_ENEMY_KILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_MG_ENEMY_KILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_AWD_LAPDANCES"), 25, 1);
	STATS::STAT_SET_INT($("MP0_MOST_ARM_WRESTLING_WINS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_NO_HAIRCUTS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_RACES_WON"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_SECURITY_CARS_ROBBED"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_VEHICLES_JACKEDR"), 500, 1);
	STATS::STAT_SET_INT($("MP0_MOST_FLIPS_IN_ONE_JUMP"), 5, 1);
	STATS::STAT_SET_INT($("MP0_AWD_WIN_AT_DARTS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_PASSENGERTIME"), 4, 1);
	STATS::STAT_SET_INT($("MP0_AWD_TIME_IN_HELICOPTER"), 4, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_3KILLSAMEGUY"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_KILLSTREAK"), 100, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_STOLENKILL"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_DM_TOTALKILLS"), 500, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GOLF_BIRDIES"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_GOLF_HOLE_IN_1"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_RACE_LAST_FIRST, 25"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_RACES_FASTEST_LAP, 25"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TDM_MVP"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FM_TENNIS_ACE"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM_TENNIS_STASETWIN"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM6DARTCHKOUT"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMATTGANGHQ"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_PARACHUTE_JUMPS_20M"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_PARACHUTE_JUMPS_50M"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AIR_LAUNCHES_OVER_40M"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_BUY_EVERY_GUN"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMDRIVEWITHOUTCRASH"), 255, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMCRATEDROPS"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM25DIFFERENTDM"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM_TENNIS_5_SET_WINS"), 1, 1);
	STATS::STAT_SET_INT($("MPPLY_AWD_FM_CR_PLAYED_BY_PEEP"), 100, 1);
	STATS::STAT_SET_INT($("MPPLY_AWD_FM_CR_RACES_MADE"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM25DIFFERENTRACES"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FM25DIFITEMSCLOTHES"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMFULLYMODDEDCAR"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMKILLBOUNTY"), 25, 1);
	STATS::STAT_SET_INT($("MP0_KILLS_PLAYERS"), 1000, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMSHOOTDOWNCOPHELI"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMKILL3ANDWINGTARACE"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMKILLSTREAKSDM"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMMOSTKILLSGANGHIDE"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMMOSTKILLSSURVIVE"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMRALLYWONDRIVE"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMRALLYWONNAV"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMREVENGEKILLSDM"), 50, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMWINAIRRACE"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMWINCUSTOMRACE"), 1, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMWINRACETOPOINTS"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMWINSEARACE"), 25, 1);
	STATS::STAT_SET_INT($("MP0_AWD_FMBASEJMP"), 25, 1);
	STATS::STAT_SET_BOOL($("MP0_MP0_AWD_FMWINALLRACEMODES"), 1, 1);
	STATS::STAT_SET_BOOL($("MP0_AWD_FMTATTOOALLBODYPARTS"), 1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_WANTED_LEVEL_TIME5STAR"), 2147483647, 1);
	STATS::STAT_SET_FLOAT($("MP0_LONGEST_WHEELIE_DIST"), 1000, 1);
}

void Features::unlock_hairstyle() {
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
}

void Features::unlock_purchases_wep() {
	STATS::STAT_SET_INT($("MP0_ADMIN_WEAPON_GV_BS_1"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_WEAPON_GV_BS_2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_ADMIN_WEAPON_GV_BS_3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_BOTTLE_IN_POSSESSION"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_WEAP_FM_PURCHASE"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
	STATS::STAT_SET_INT($("MP0_WEAP_FM_ADDON_PURCH"), -1, 1);
	STATS::STAT_SET_INT($("MP0_WEAP_FM_ADDON_PURCH2"), -1, 1);
	STATS::STAT_SET_INT($("MP0_WEAP_FM_ADDON_PURCH3"), -1, 1);
	STATS::STAT_SET_INT($("MP0_WEAP_FM_ADDON_PURCH4"), -1, 1);
	STATS::STAT_SET_INT($("MP0_WEAP_FM_ADDON_PURCH5"), -1, 1);
}

void Features::unlock_roosvelt_listed() {
	STATS::STAT_SET_INT($("MPPLY_VEHICLE_ID_ADMIN_WEB"), 117401876, 1);
}

void Features::unlock_clear_report() {
	STATS::STAT_SET_INT($("MP0_CHEAT_BITSET"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_FRIENDLY"), 100, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_HELPFUL"), 100, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_GRIEFING"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_VC_HATE"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_ISPUNISHED"), 0, true);
}

void Features::unlock_clear_badsport() {
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	STATS::STAT_SET_INT($("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	STATS::STAT_SET_FLOAT($("BADSPORT_RESET_MINUTES"), 1.0, true);
	STATS::STAT_SET_FLOAT($("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
	STATS::STAT_SET_FLOAT($("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
	STATS::STAT_SET_BOOL($("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
	STATS::STAT_SET_INT($("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
	STATS::STAT_SET_INT($("MP0_BAD_SPORT_BITSET"), 0, true);
}

void Features::teleport_to_objective()
{
	Vector3 coords;
	Entity e;
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, FALSE))
		e = PED::GET_VEHICLE_PED_IS_USING(playerPed);
	else e = playerPed;

	bool blipFound = false;

	if (ENTITY::IS_ENTITY_A_VEHICLE(e)) RequestControlOfEnt(e);
	for (int i = 0; i <= 1000; i++)
	{
		Blip_t* blip = Hooking::GetBlipList()->m_Blips[i];
		if (blip)
		{
			if ((blip->dwColor == ColorYellowMission && blip->iIcon == SpriteStandard) || (blip->dwColor == ColorYellow && blip->iIcon == SpriteStandard) ||
				(blip->dwColor == ColorWhite && blip->iIcon == SpriteRaceFinish) || (blip->dwColor == ColorGreen && blip->iIcon == SpriteStandard) || (blip->iIcon == SpriteCrateDrop)) {
				coords = blip->coords;
				blipFound = true;
				break; //During a race there's sometimes 2 yellow markers. We want the first one.
			}
		}
	}
	blipFound ? teleport_to_coords(e, coords) : notifyAboveMap("Objective not found!", 0);
}